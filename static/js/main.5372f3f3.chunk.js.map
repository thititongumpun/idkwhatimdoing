{"version":3,"sources":["components/AddTodo.tsx","components/TodoListItem.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddTodo","addTodo","useState","text","setText","type","value","onChange","e","target","onClick","preventDefault","TodoListItem","todo","toggleTodo","style","textDecoration","complete","undefined","checked","TodoList","todos","map","initialTodos","App","setTodos","Fragment","selectedTodo","newTodos","newTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAMaA,EAA2B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAC/BC,mBAAS,IADsB,mBAChDC,EADgD,KAC1CC,EAD0C,KAGvD,OACE,iCACE,uBACEC,KAAK,OACLC,MAAOH,EACPI,SAAU,SAAAC,GACRJ,EAAQI,EAAEC,OAAOH,UAGrB,wBACED,KAAK,SACLK,QAAS,SAAAF,GACPA,EAAEG,iBACFV,EAAQE,GACRC,EAAQ,KALZ,yBCXOQ,EAAgC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WACpD,OACE,6BACE,wBAAOC,MAAO,CAACC,eAAgBH,EAAKI,SAAW,oBAAiBC,GAAhE,UACA,uBACEb,KAAK,WACLc,QAASN,EAAKI,SACdP,QAAS,WACPI,EAAWD,MAEV,IACFA,EAAKV,WCVDiB,EAA4B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOP,EAAiB,EAAjBA,WACjD,OACE,6BACGO,EAAMC,KAAI,SAAAT,GAAI,OACb,cAAC,EAAD,CAA8BA,KAAMA,EAAMC,WAAYA,GAAnCD,EAAKV,YCP1BoB,G,MAAuB,CAC3B,CACEpB,KAAM,MACNc,UAAU,GAEZ,CACEd,KAAM,OACNc,UAAU,GAEZ,CACEd,KAAM,MACNc,UAAU,KAiCCO,EA7BO,WAAO,IAAD,EACAtB,mBAASqB,GADT,mBACnBF,EADmB,KACZI,EADY,KAoB1B,OACE,eAAC,IAAMC,SAAP,WACE,cAAC,EAAD,CAAUL,MAAOA,EAAOP,WAnBT,SAACa,GAClB,IAAMC,EAAWP,EAAMC,KAAI,SAACT,GAC1B,OAAIA,IAASc,EACJ,2BACFd,GADL,IAEEI,UAAWJ,EAAKI,WAGbJ,KAETY,EAASG,MAUP,cAAC,EAAD,CAAS3B,QAPY,SAACE,GACxB,IAAM0B,EAAU,CAAE1B,OAAMc,UAAU,GAClCQ,EAAS,GAAD,mBAAKJ,GAAL,CAAYQ,YCxBTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5372f3f3.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ninterface Props {\n  addTodo: AddTodo;\n}\n\nexport const AddTodo: React.FC<Props> = ({ addTodo }) => {\n  const [text, setText] = useState('');\n\n  return (\n    <form>\n      <input\n        type=\"text\"\n        value={text}\n        onChange={e => {\n          setText(e.target.value);\n        }}\n      />\n      <button\n        type=\"submit\"\n        onClick={e => {\n          e.preventDefault();\n          addTodo(text);\n          setText('');\n        }}\n      >\n        AddTodo\n      </button>\n    </form>\n  );\n}","import React from 'react';\n\ninterface Props {\n  todo: Todo;\n  toggleTodo: ToggleTodo;\n}\n\nexport const TodoListItem: React.FC<Props> = ({ todo, toggleTodo }) => {\n  return (\n    <li>\n      <label style={{textDecoration: todo.complete ? 'line-through' : undefined }}>\n      <input\n        type=\"checkbox\"\n        checked={todo.complete}\n        onClick={() => {\n          toggleTodo(todo);\n        }}\n        />{' '}\n        {todo.text}\n      </label>\n    </li>\n  );\n}","import React from 'react';\nimport { TodoListItem } from './TodoListItem';\n\ninterface Props {\n  todos: Todo[];\n  toggleTodo: ToggleTodo;\n}\n\nexport const TodoList: React.FC<Props> = ({ todos, toggleTodo }) => {\n  return (\n    <ul>\n      {todos.map(todo => (\n        <TodoListItem key={todo.text} todo={todo} toggleTodo={toggleTodo} />\n      ))}\n    </ul>\n  );\n}","import React, { useState } from 'react';\nimport { AddTodo } from './components/AddTodo';\nimport { TodoList } from './components/TodoList';\nimport './App.css';\n\nconst initialTodos: Todo[] = [\n  {\n    text: 'run',\n    complete: false\n  },\n  {\n    text: 'walk',\n    complete: true\n  },\n  {\n    text: 'eat',\n    complete: false\n  }\n];\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState(initialTodos);\n\n  const toggleTodo = (selectedTodo: Todo) => {\n    const newTodos = todos.map((todo) => {\n      if (todo === selectedTodo) {\n        return {\n          ...todo,\n          complete: !todo.complete\n        };\n      }\n      return todo;\n    });\n    setTodos(newTodos);\n  }\n\n  const addTodo: AddTodo = (text: string) => {\n    const newTodo = { text, complete: false };\n    setTodos([...todos, newTodo]);\n  }\n  return (\n    <React.Fragment>\n      <TodoList todos={todos} toggleTodo={toggleTodo} />\n      <AddTodo addTodo={addTodo} />\n    </React.Fragment>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}