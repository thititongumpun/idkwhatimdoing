{"version":3,"sources":["components/TodoListItem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoListItem","todo","toggleTodo","style","textDecoration","complete","undefined","type","checked","onClick","text","initialTodos","App","useState","todos","setTodos","selectedTodo","newTodos","map","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAOaA,EAAgC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WACpD,OACE,6BACE,wBAAOC,MAAO,CAACC,eAAgBH,EAAKI,SAAW,oBAAiBC,GAAhE,UACA,uBACEC,KAAK,WACLC,QAASP,EAAKI,SACdI,QAAS,WACPP,EAAWD,MALf,IAOMA,EAAKS,WCdXC,EAAuB,CAC3B,CACED,KAAM,MACNL,UAAU,GAEZ,CACEK,KAAM,OACJL,UAAU,IA6BDO,EAzBO,WAAO,IAAD,EACAC,mBAASF,GADT,mBACnBG,EADmB,KACZC,EADY,KAGpBb,EAAa,SAACc,GAClB,IAAMC,EAAWH,EAAMI,KAAI,SAACjB,GAC1B,OAAIA,IAASe,EACJ,2BACFf,GADL,IAEEI,UAAWJ,EAAKI,WAGbJ,KAETc,EAASE,IAEX,OACE,qBAAIE,UAAU,MAAd,UACE,yDACA,cAAC,EAAD,CAAclB,KAAMa,EAAM,GAAIZ,WAAYA,IAC1C,cAAC,EAAD,CAAcD,KAAMa,EAAM,GAAIZ,WAAYA,QCnBjCkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e5643b37.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  todo: Todo;\n  toggleTodo: ToggleTodo;\n}\n\nexport const TodoListItem: React.FC<Props> = ({ todo, toggleTodo }) => {\n  return (\n    <li>\n      <label style={{textDecoration: todo.complete ? 'line-through' : undefined }}>\n      <input\n        type=\"checkbox\"\n        checked={todo.complete}\n        onClick={() => {\n          toggleTodo(todo);\n        }}\n        /> {todo.text}\n      </label>\n    </li>\n  );\n}","import React, { useState } from 'react';\nimport { TodoListItem } from \"./components/TodoListItem\";\n\nconst initialTodos: Todo[] = [\n  {\n    text: 'run',\n    complete: false\n  },\n  {\n    text: 'walk'\n    , complete: true\n  }\n];\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState(initialTodos);\n\n  const toggleTodo = (selectedTodo: Todo) => {\n    const newTodos = todos.map((todo) => {\n      if (todo === selectedTodo) {\n        return {\n          ...todo,\n          complete: !todo.complete\n        };\n      }\n      return todo;\n    });\n    setTodos(newTodos);\n  }\n  return (\n    <ul className=\"App\">\n      <h3>Hello let begin Agian!?</h3>\n      <TodoListItem todo={todos[0]} toggleTodo={toggleTodo} />\n      <TodoListItem todo={todos[1]} toggleTodo={toggleTodo} />\n    </ul>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}